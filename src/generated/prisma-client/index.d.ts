// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  snake: (where?: SnakeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  snake: (where: SnakeWhereUniqueInput) => SnakeNullablePromise;
  snakes: (args?: {
    where?: SnakeWhereInput;
    orderBy?: SnakeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Snake>;
  snakesConnection: (args?: {
    where?: SnakeWhereInput;
    orderBy?: SnakeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SnakeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSnake: (data: SnakeCreateInput) => SnakePromise;
  updateSnake: (args: {
    data: SnakeUpdateInput;
    where: SnakeWhereUniqueInput;
  }) => SnakePromise;
  updateManySnakes: (args: {
    data: SnakeUpdateManyMutationInput;
    where?: SnakeWhereInput;
  }) => BatchPayloadPromise;
  upsertSnake: (args: {
    where: SnakeWhereUniqueInput;
    create: SnakeCreateInput;
    update: SnakeUpdateInput;
  }) => SnakePromise;
  deleteSnake: (where: SnakeWhereUniqueInput) => SnakePromise;
  deleteManySnakes: (where?: SnakeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  snake: (
    where?: SnakeSubscriptionWhereInput
  ) => SnakeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SnakeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type SnakeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SnakeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<SnakeWhereInput[] | SnakeWhereInput>;
  OR?: Maybe<SnakeWhereInput[] | SnakeWhereInput>;
  NOT?: Maybe<SnakeWhereInput[] | SnakeWhereInput>;
}

export interface SnakeCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description: String;
}

export interface SnakeUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface SnakeUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface SnakeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SnakeWhereInput>;
  AND?: Maybe<SnakeSubscriptionWhereInput[] | SnakeSubscriptionWhereInput>;
  OR?: Maybe<SnakeSubscriptionWhereInput[] | SnakeSubscriptionWhereInput>;
  NOT?: Maybe<SnakeSubscriptionWhereInput[] | SnakeSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Snake {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name?: String;
  description: String;
}

export interface SnakePromise extends Promise<Snake>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface SnakeSubscription
  extends Promise<AsyncIterator<Snake>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface SnakeNullablePromise
  extends Promise<Snake | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface SnakeConnection {
  pageInfo: PageInfo;
  edges: SnakeEdge[];
}

export interface SnakeConnectionPromise
  extends Promise<SnakeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SnakeEdge>>() => T;
  aggregate: <T = AggregateSnakePromise>() => T;
}

export interface SnakeConnectionSubscription
  extends Promise<AsyncIterator<SnakeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SnakeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSnakeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SnakeEdge {
  node: Snake;
  cursor: String;
}

export interface SnakeEdgePromise extends Promise<SnakeEdge>, Fragmentable {
  node: <T = SnakePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SnakeEdgeSubscription
  extends Promise<AsyncIterator<SnakeEdge>>,
    Fragmentable {
  node: <T = SnakeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSnake {
  count: Int;
}

export interface AggregateSnakePromise
  extends Promise<AggregateSnake>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSnakeSubscription
  extends Promise<AsyncIterator<AggregateSnake>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SnakeSubscriptionPayload {
  mutation: MutationType;
  node: Snake;
  updatedFields: String[];
  previousValues: SnakePreviousValues;
}

export interface SnakeSubscriptionPayloadPromise
  extends Promise<SnakeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SnakePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SnakePreviousValuesPromise>() => T;
}

export interface SnakeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SnakeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SnakeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SnakePreviousValuesSubscription>() => T;
}

export interface SnakePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name?: String;
  description: String;
}

export interface SnakePreviousValuesPromise
  extends Promise<SnakePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface SnakePreviousValuesSubscription
  extends Promise<AsyncIterator<SnakePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Snake",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
