module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateSnake {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createSnake(data: SnakeCreateInput!): Snake!
  updateSnake(data: SnakeUpdateInput!, where: SnakeWhereUniqueInput!): Snake
  updateManySnakes(data: SnakeUpdateManyMutationInput!, where: SnakeWhereInput): BatchPayload!
  upsertSnake(where: SnakeWhereUniqueInput!, create: SnakeCreateInput!, update: SnakeUpdateInput!): Snake!
  deleteSnake(where: SnakeWhereUniqueInput!): Snake
  deleteManySnakes(where: SnakeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  snake(where: SnakeWhereUniqueInput!): Snake
  snakes(where: SnakeWhereInput, orderBy: SnakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Snake]!
  snakesConnection(where: SnakeWhereInput, orderBy: SnakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SnakeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Snake {
  id: ID!
  createdAt: DateTime!
  name: String
  description: String!
  owner: User
}

type SnakeConnection {
  pageInfo: PageInfo!
  edges: [SnakeEdge]!
  aggregate: AggregateSnake!
}

input SnakeCreateInput {
  id: ID
  name: String
  description: String!
  owner: UserCreateOneWithoutSnakesInput
}

input SnakeCreateManyWithoutOwnerInput {
  create: [SnakeCreateWithoutOwnerInput!]
  connect: [SnakeWhereUniqueInput!]
}

input SnakeCreateWithoutOwnerInput {
  id: ID
  name: String
  description: String!
}

type SnakeEdge {
  node: Snake!
  cursor: String!
}

enum SnakeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type SnakePreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String
  description: String!
}

input SnakeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SnakeScalarWhereInput!]
  OR: [SnakeScalarWhereInput!]
  NOT: [SnakeScalarWhereInput!]
}

type SnakeSubscriptionPayload {
  mutation: MutationType!
  node: Snake
  updatedFields: [String!]
  previousValues: SnakePreviousValues
}

input SnakeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SnakeWhereInput
  AND: [SnakeSubscriptionWhereInput!]
  OR: [SnakeSubscriptionWhereInput!]
  NOT: [SnakeSubscriptionWhereInput!]
}

input SnakeUpdateInput {
  name: String
  description: String
  owner: UserUpdateOneWithoutSnakesInput
}

input SnakeUpdateManyDataInput {
  name: String
  description: String
}

input SnakeUpdateManyMutationInput {
  name: String
  description: String
}

input SnakeUpdateManyWithoutOwnerInput {
  create: [SnakeCreateWithoutOwnerInput!]
  delete: [SnakeWhereUniqueInput!]
  connect: [SnakeWhereUniqueInput!]
  set: [SnakeWhereUniqueInput!]
  disconnect: [SnakeWhereUniqueInput!]
  update: [SnakeUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [SnakeUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [SnakeScalarWhereInput!]
  updateMany: [SnakeUpdateManyWithWhereNestedInput!]
}

input SnakeUpdateManyWithWhereNestedInput {
  where: SnakeScalarWhereInput!
  data: SnakeUpdateManyDataInput!
}

input SnakeUpdateWithoutOwnerDataInput {
  name: String
  description: String
}

input SnakeUpdateWithWhereUniqueWithoutOwnerInput {
  where: SnakeWhereUniqueInput!
  data: SnakeUpdateWithoutOwnerDataInput!
}

input SnakeUpsertWithWhereUniqueWithoutOwnerInput {
  where: SnakeWhereUniqueInput!
  update: SnakeUpdateWithoutOwnerDataInput!
  create: SnakeCreateWithoutOwnerInput!
}

input SnakeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  owner: UserWhereInput
  AND: [SnakeWhereInput!]
  OR: [SnakeWhereInput!]
  NOT: [SnakeWhereInput!]
}

input SnakeWhereUniqueInput {
  id: ID
}

type Subscription {
  snake(where: SnakeSubscriptionWhereInput): SnakeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
  snakes(where: SnakeWhereInput, orderBy: SnakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Snake!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
  snakes: SnakeCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutSnakesInput {
  create: UserCreateWithoutSnakesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSnakesInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  username: String
  password: String
  snakes: SnakeUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  username: String
  password: String
}

input UserUpdateOneWithoutSnakesInput {
  create: UserCreateWithoutSnakesInput
  update: UserUpdateWithoutSnakesDataInput
  upsert: UserUpsertWithoutSnakesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutSnakesDataInput {
  firstName: String
  lastName: String
  email: String
  username: String
  password: String
}

input UserUpsertWithoutSnakesInput {
  update: UserUpdateWithoutSnakesDataInput!
  create: UserCreateWithoutSnakesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  snakes_every: SnakeWhereInput
  snakes_some: SnakeWhereInput
  snakes_none: SnakeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
`
      }
    