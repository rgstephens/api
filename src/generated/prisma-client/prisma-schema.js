module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateSnake {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createSnake(data: SnakeCreateInput!): Snake!
  updateSnake(data: SnakeUpdateInput!, where: SnakeWhereUniqueInput!): Snake
  updateManySnakes(data: SnakeUpdateManyMutationInput!, where: SnakeWhereInput): BatchPayload!
  upsertSnake(where: SnakeWhereUniqueInput!, create: SnakeCreateInput!, update: SnakeUpdateInput!): Snake!
  deleteSnake(where: SnakeWhereUniqueInput!): Snake
  deleteManySnakes(where: SnakeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  snake(where: SnakeWhereUniqueInput!): Snake
  snakes(where: SnakeWhereInput, orderBy: SnakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Snake]!
  snakesConnection(where: SnakeWhereInput, orderBy: SnakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SnakeConnection!
  node(id: ID!): Node
}

type Snake {
  id: ID!
  createdAt: DateTime!
  name: String
  description: String!
}

type SnakeConnection {
  pageInfo: PageInfo!
  edges: [SnakeEdge]!
  aggregate: AggregateSnake!
}

input SnakeCreateInput {
  id: ID
  name: String
  description: String!
}

type SnakeEdge {
  node: Snake!
  cursor: String!
}

enum SnakeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type SnakePreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String
  description: String!
}

type SnakeSubscriptionPayload {
  mutation: MutationType!
  node: Snake
  updatedFields: [String!]
  previousValues: SnakePreviousValues
}

input SnakeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SnakeWhereInput
  AND: [SnakeSubscriptionWhereInput!]
  OR: [SnakeSubscriptionWhereInput!]
  NOT: [SnakeSubscriptionWhereInput!]
}

input SnakeUpdateInput {
  name: String
  description: String
}

input SnakeUpdateManyMutationInput {
  name: String
  description: String
}

input SnakeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SnakeWhereInput!]
  OR: [SnakeWhereInput!]
  NOT: [SnakeWhereInput!]
}

input SnakeWhereUniqueInput {
  id: ID
}

type Subscription {
  snake(where: SnakeSubscriptionWhereInput): SnakeSubscriptionPayload
}
`
      }
    